#!/usr/bin/env python3
"""
Script para verificar que el PDF espec√≠fico se cargue correctamente
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_api.settings')
django.setup()

from chatbot.document_loader import cargar_documentos
from chatbot.vector_store import buscar_documentos, inicializar_vector_store

def verificar_pdf_especifico():
    """
    Verifica que el PDF espec√≠fico se haya cargado correctamente
    """
    pdf_nombre = "espe_software_aplicaciones_basadas_en_el_conocimiento.pdf"
    base_dir = os.path.join("media", "docs")
    pdf_path = os.path.join(base_dir, pdf_nombre)
    
    print("üîç VERIFICACI√ìN DEL PDF ESPEC√çFICO")
    print("=" * 50)
    
    # 1. Verificar que el archivo existe f√≠sicamente
    print(f"üìÅ Verificando archivo: {pdf_nombre}")
    if os.path.exists(pdf_path):
        file_size = os.path.getsize(pdf_path)
        print(f"   ‚úÖ Archivo encontrado: {file_size} bytes ({file_size/1024:.1f} KB)")
    else:
        print(f"   ‚ùå Archivo NO encontrado en: {pdf_path}")
        return False
    
    # 2. Cargar documentos y verificar si se proces√≥
    print("\nüìñ Cargando documentos...")
    try:
        documentos = cargar_documentos()
        print(f"   ‚úÖ Total documentos cargados: {len(documentos)}")
        
        # Buscar chunks del PDF espec√≠fico
        pdf_chunks = []
        for doc in documentos:
            if doc.metadata.get("source") == "pdf":
                if doc.metadata.get("filename") == pdf_nombre:
                    pdf_chunks.append(doc)
        
        print(f"\nüìä Chunks del PDF '{pdf_nombre}': {len(pdf_chunks)}")
        
        if pdf_chunks:
            print("   ‚úÖ PDF cargado correctamente")
            
            # Mostrar informaci√≥n de los primeros chunks
            for i, chunk in enumerate(pdf_chunks[:3]):
                print(f"\n   üìÑ Chunk {i+1}:")
                print(f"      - Contenido: {chunk.page_content[:100]}...")
                print(f"      - Metadata: {chunk.metadata}")
                
            # Mostrar estad√≠sticas
            contenido_total = sum(len(chunk.page_content) for chunk in pdf_chunks)
            print(f"\n   üìà Estad√≠sticas:")
            print(f"      - Total chunks: {len(pdf_chunks)}")
            print(f"      - Contenido total: {contenido_total} caracteres")
            print(f"      - Promedio por chunk: {contenido_total//len(pdf_chunks)} caracteres")
            
        else:
            print("   ‚ùå PDF NO se carg√≥ como chunks")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error cargando documentos: {e}")
        return False
    
    # 3. Verificar b√∫squeda sem√°ntica
    print("\nüîç Probando b√∫squeda sem√°ntica...")
    try:
        inicializar_vector_store()
        
        # Preguntas de prueba relacionadas con aplicaciones basadas en conocimiento
        preguntas_prueba = [
            "aplicaciones basadas en el conocimiento",
            "sistemas expertos",
            "inteligencia artificial",
            "programaci√≥n en software",
            "syllabus aplicaciones conocimiento"
        ]
        
        for pregunta in preguntas_prueba:
            print(f"\n   üîç Probando: '{pregunta}'")
            resultados = buscar_documentos(pregunta, top_k=5)
            
            # Verificar si el PDF aparece en los resultados
            pdf_encontrado = False
            for doc in resultados:
                if doc.metadata.get("filename") == pdf_nombre:
                    pdf_encontrado = True
                    print(f"      ‚úÖ PDF encontrado en resultado")
                    print(f"      üìÑ Contenido: {doc.page_content[:100]}...")
                    break
            
            if not pdf_encontrado:
                print(f"      ‚ö†Ô∏è  PDF no aparece en top 5 resultados")
                
    except Exception as e:
        print(f"   ‚ùå Error en b√∫squeda sem√°ntica: {e}")
        return False
    
    print("\n‚úÖ VERIFICACI√ìN COMPLETADA")
    return True

def probar_preguntas_especificas():
    """
    Prueba preguntas espec√≠ficas sobre aplicaciones basadas en conocimiento
    """
    print("\nü§ñ PROBANDO PREGUNTAS ESPEC√çFICAS")
    print("=" * 50)
    
    preguntas = [
        "¬øQu√© es aplicaciones basadas en el conocimiento?",
        "¬øCu√°l es el contenido de la materia de aplicaciones basadas en el conocimiento?",
        "¬øQu√© temas se ven en aplicaciones basadas en el conocimiento?",
        "¬øHay informaci√≥n sobre sistemas expertos?",
        "¬øQu√© syllabus tiene la materia de aplicaciones basadas en el conocimiento?"
    ]
    
    for pregunta in preguntas:
        print(f"\n‚ùì Pregunta: {pregunta}")
        try:
            resultados = buscar_documentos(pregunta, top_k=3)
            
            for i, doc in enumerate(resultados, 1):
                source = doc.metadata.get("source", "unknown")
                filename = doc.metadata.get("filename", "N/A")
                
                print(f"   {i}. Fuente: {source}")
                if source == "pdf":
                    print(f"      Archivo: {filename}")
                print(f"      Contenido: {doc.page_content[:150]}...")
                print()
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")

def main():
    """
    Funci√≥n principal
    """
    print("üöÄ INICIANDO VERIFICACI√ìN DEL PDF")
    print("=" * 60)
    
    # Verificar PDF espec√≠fico
    if verificar_pdf_especifico():
        # Probar preguntas espec√≠ficas
        probar_preguntas_especificas()
        
        print("\nüéØ RESUMEN:")
        print("‚úÖ El PDF se ha cargado correctamente")
        print("‚úÖ Est√° disponible para b√∫squeda sem√°ntica")
        print("‚úÖ Puede responder preguntas relacionadas")
        
    else:
        print("\n‚ùå PROBLEMAS ENCONTRADOS:")
        print("- El PDF no se carg√≥ correctamente")
        print("- Verificar que el archivo est√© en media/docs/")
        print("- Verificar que el archivo no est√© corrupto")
        print("- Reiniciar el servidor si es necesario")

if __name__ == "__main__":
    main()
